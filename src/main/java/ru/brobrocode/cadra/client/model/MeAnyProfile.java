package ru.brobrocode.cadra.client.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;

import java.util.Objects;

/**
 * Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение 
 */

@Schema(name = "MeAnyProfile", description = "Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение ")
@JsonIgnoreProperties(
  value = "auth_type", // ignore manually set auth_type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the auth_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "auth_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = MeApplicantProfile.class, name = "applicant"),
  @JsonSubTypes.Type(value = MeAnyProfile.class, name = "application"),
  @JsonSubTypes.Type(value = MeManagerProfile.class, name = "employer"),
  @JsonSubTypes.Type(value = MeEmployerProfile.class, name = "employer_integration"),
  @JsonSubTypes.Type(value = MeAnyUserProfile.class, name = "MeAnyUserProfile")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-17T15:41:09.394389505+05:00[Asia/Yekaterinburg]", comments = "Generator version: 7.6.0")
public class MeAnyProfile extends MeCommonProfile implements MeProfile {

  public MeAnyProfile() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public MeAnyProfile(String authType, Boolean isAdmin, Boolean isApplicant, Boolean isApplication, Boolean isEmployer, Boolean isEmployerIntegration) {
    super(authType, isAdmin, isApplicant, isApplication, isEmployer, isEmployerIntegration);
  }


  public MeAnyProfile authType(String authType) {
    super.authType(authType);
    return this;
  }

  public MeAnyProfile isAdmin(Boolean isAdmin) {
    super.isAdmin(isAdmin);
    return this;
  }

  public MeAnyProfile isApplicant(Boolean isApplicant) {
    super.isApplicant(isApplicant);
    return this;
  }

  public MeAnyProfile isApplication(Boolean isApplication) {
    super.isApplication(isApplication);
    return this;
  }

  public MeAnyProfile isEmployer(Boolean isEmployer) {
    super.isEmployer(isEmployer);
    return this;
  }

  public MeAnyProfile isEmployerIntegration(Boolean isEmployerIntegration) {
    super.isEmployerIntegration(isEmployerIntegration);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeAnyProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

