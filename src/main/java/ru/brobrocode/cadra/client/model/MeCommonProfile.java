package ru.brobrocode.cadra.client.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.NotNull;

import java.util.Objects;

/**
 * Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение 
 */

@Schema(name = "MeCommonProfile", description = "Содержит флаги, актуальные для любого типа авторизации: соискатель, работодатель, приложение ")
@JsonIgnoreProperties(
  value = "auth_type", // ignore manually set auth_type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the auth_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "auth_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = MeApplicantProfile.class, name = "applicant"),
  @JsonSubTypes.Type(value = MeAnyProfile.class, name = "application"),
  @JsonSubTypes.Type(value = MeManagerProfile.class, name = "employer"),
  @JsonSubTypes.Type(value = MeEmployerProfile.class, name = "employer_integration"),
  @JsonSubTypes.Type(value = MeAnyUserProfile.class, name = "MeAnyUserProfile")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-17T15:41:09.394389505+05:00[Asia/Yekaterinburg]", comments = "Generator version: 7.6.0")
public class MeCommonProfile {

  private String authType = null;

  private Boolean isAdmin;

  private Boolean isApplicant;

  private Boolean isApplication;

  private Boolean isEmployer;

  private Boolean isEmployerIntegration;

  public MeCommonProfile() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public MeCommonProfile(String authType, Boolean isAdmin, Boolean isApplicant, Boolean isApplication, Boolean isEmployer, Boolean isEmployerIntegration) {
    this.authType = authType;
    this.isAdmin = isAdmin;
    this.isApplicant = isApplicant;
    this.isApplication = isApplication;
    this.isEmployer = isEmployer;
    this.isEmployerIntegration = isEmployerIntegration;
  }

  public MeCommonProfile authType(String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Тип авторизации
   * @return authType
  */
  @NotNull 
  @Schema(name = "auth_type", example = "applicant", description = "Тип авторизации", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("auth_type")
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(String authType) {
    this.authType = authType;
  }

  public MeCommonProfile isAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
    return this;
  }

  /**
   * Является ли текущий пользователь администратором сайта
   * @return isAdmin
  */
  @NotNull 
  @Schema(name = "is_admin", example = "false", description = "Является ли текущий пользователь администратором сайта", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("is_admin")
  public Boolean getIsAdmin() {
    return isAdmin;
  }

  public void setIsAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
  }

  public MeCommonProfile isApplicant(Boolean isApplicant) {
    this.isApplicant = isApplicant;
    return this;
  }

  /**
   * Является ли текущий пользователь соискателем
   * @return isApplicant
  */
  @NotNull 
  @Schema(name = "is_applicant", example = "false", description = "Является ли текущий пользователь соискателем", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("is_applicant")
  public Boolean getIsApplicant() {
    return isApplicant;
  }

  public void setIsApplicant(Boolean isApplicant) {
    this.isApplicant = isApplicant;
  }

  public MeCommonProfile isApplication(Boolean isApplication) {
    this.isApplication = isApplication;
    return this;
  }

  /**
   * Является ли авторизованный клиент приложением
   * @return isApplication
  */
  @NotNull 
  @Schema(name = "is_application", example = "false", description = "Является ли авторизованный клиент приложением", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("is_application")
  public Boolean getIsApplication() {
    return isApplication;
  }

  public void setIsApplication(Boolean isApplication) {
    this.isApplication = isApplication;
  }

  public MeCommonProfile isEmployer(Boolean isEmployer) {
    this.isEmployer = isEmployer;
    return this;
  }

  /**
   * Является ли текущий пользователь менеджером
   * @return isEmployer
  */
  @NotNull 
  @Schema(name = "is_employer", example = "false", description = "Является ли текущий пользователь менеджером", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("is_employer")
  public Boolean getIsEmployer() {
    return isEmployer;
  }

  public void setIsEmployer(Boolean isEmployer) {
    this.isEmployer = isEmployer;
  }

  public MeCommonProfile isEmployerIntegration(Boolean isEmployerIntegration) {
    this.isEmployerIntegration = isEmployerIntegration;
    return this;
  }

  /**
   * Является ли текущий пользователь работодателем
   * @return isEmployerIntegration
  */
  @NotNull 
  @Schema(name = "is_employer_integration", example = "false", description = "Является ли текущий пользователь работодателем", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("is_employer_integration")
  public Boolean getIsEmployerIntegration() {
    return isEmployerIntegration;
  }

  public void setIsEmployerIntegration(Boolean isEmployerIntegration) {
    this.isEmployerIntegration = isEmployerIntegration;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeCommonProfile meCommonProfile = (MeCommonProfile) o;
    return Objects.equals(this.authType, meCommonProfile.authType) &&
        Objects.equals(this.isAdmin, meCommonProfile.isAdmin) &&
        Objects.equals(this.isApplicant, meCommonProfile.isApplicant) &&
        Objects.equals(this.isApplication, meCommonProfile.isApplication) &&
        Objects.equals(this.isEmployer, meCommonProfile.isEmployer) &&
        Objects.equals(this.isEmployerIntegration, meCommonProfile.isEmployerIntegration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, isAdmin, isApplicant, isApplication, isEmployer, isEmployerIntegration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeCommonProfile {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("    isApplicant: ").append(toIndentedString(isApplicant)).append("\n");
    sb.append("    isApplication: ").append(toIndentedString(isApplication)).append("\n");
    sb.append("    isEmployer: ").append(toIndentedString(isEmployer)).append("\n");
    sb.append("    isEmployerIntegration: ").append(toIndentedString(isEmployerIntegration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

