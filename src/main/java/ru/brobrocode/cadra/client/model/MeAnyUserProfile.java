package ru.brobrocode.cadra.client.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;

import java.util.Objects;

/**
 * Базовый профиль текущего пользователя, авторизованного как соискатель или работодатель
 */

@Schema(name = "MeAnyUserProfile", description = "Базовый профиль текущего пользователя, авторизованного как соискатель или работодатель")
@JsonIgnoreProperties(
  value = "auth_type", // ignore manually set auth_type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the auth_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "auth_type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = MeApplicantProfile.class, name = "applicant"),
  @JsonSubTypes.Type(value = MeAnyProfile.class, name = "application"),
  @JsonSubTypes.Type(value = MeManagerProfile.class, name = "employer"),
  @JsonSubTypes.Type(value = MeEmployerProfile.class, name = "employer_integration")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-17T15:41:09.394389505+05:00[Asia/Yekaterinburg]", comments = "Generator version: 7.6.0")
public class MeAnyUserProfile extends MeAnyProfile {

  private String email = null;

  private String firstName;

  private String id;

  @Deprecated
  private Boolean isAnonymous;

  private String lastName;

  @Deprecated
  private String midName = null;

  private String middleName = null;

  private String phone = null;

  public MeAnyUserProfile() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public MeAnyUserProfile(String firstName, String id, String lastName, String authType, Boolean isAdmin, Boolean isApplicant, Boolean isApplication, Boolean isEmployer, Boolean isEmployerIntegration) {
    super(authType, isAdmin, isApplicant, isApplication, isEmployer, isEmployerIntegration);
    this.firstName = firstName;
    this.id = id;
    this.lastName = lastName;
  }

  public MeAnyUserProfile email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email текущего пользователя
   * @return email
  */
  @Email
  @Schema(name = "email", example = "ivanov@example.com", description = "Email текущего пользователя", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("email")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public MeAnyUserProfile firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Имя текущего пользователя
   * @return firstName
  */
  @NotNull 
  @Schema(name = "first_name", example = "Александр", description = "Имя текущего пользователя", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("first_name")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public MeAnyUserProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор текущего пользователя
   * @return id
  */
  @NotNull 
  @Schema(name = "id", example = "12345678", description = "Идентификатор текущего пользователя", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MeAnyUserProfile isAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
    return this;
  }

  /**
   * Get isAnonymous
   * @return isAnonymous
   * @deprecated
  */
  
  @Schema(name = "is_anonymous", deprecated = true, requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("is_anonymous")
  @Deprecated
  public Boolean getIsAnonymous() {
    return isAnonymous;
  }

  /**
   * @deprecated
  */
  @Deprecated
  public void setIsAnonymous(Boolean isAnonymous) {
    this.isAnonymous = isAnonymous;
  }

  public MeAnyUserProfile lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Фамилия текущего пользователя
   * @return lastName
  */
  @NotNull 
  @Schema(name = "last_name", example = "Иванов", description = "Фамилия текущего пользователя", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("last_name")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public MeAnyUserProfile midName(String midName) {
    this.midName = midName;
    return this;
  }

  /**
   * Get midName
   * @return midName
   * @deprecated
  */
  
  @Schema(name = "mid_name", example = "Николаевич", deprecated = true, requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("mid_name")
  @Deprecated
  public String getMidName() {
    return midName;
  }

  /**
   * @deprecated
  */
  @Deprecated
  public void setMidName(String midName) {
    this.midName = midName;
  }

  public MeAnyUserProfile middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * Отчество текущего пользователя
   * @return middleName
  */
  
  @Schema(name = "middle_name", example = "Петрович", description = "Отчество текущего пользователя", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("middle_name")
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public MeAnyUserProfile phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Телефон текущего пользователя
   * @return phone
  */
  
  @Schema(name = "phone", example = "79164555555", description = "Телефон текущего пользователя", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("phone")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public MeAnyUserProfile authType(String authType) {
    super.authType(authType);
    return this;
  }

  public MeAnyUserProfile isAdmin(Boolean isAdmin) {
    super.isAdmin(isAdmin);
    return this;
  }

  public MeAnyUserProfile isApplicant(Boolean isApplicant) {
    super.isApplicant(isApplicant);
    return this;
  }

  public MeAnyUserProfile isApplication(Boolean isApplication) {
    super.isApplication(isApplication);
    return this;
  }

  public MeAnyUserProfile isEmployer(Boolean isEmployer) {
    super.isEmployer(isEmployer);
    return this;
  }

  public MeAnyUserProfile isEmployerIntegration(Boolean isEmployerIntegration) {
    super.isEmployerIntegration(isEmployerIntegration);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeAnyUserProfile meAnyUserProfile = (MeAnyUserProfile) o;
    return Objects.equals(this.email, meAnyUserProfile.email) &&
        Objects.equals(this.firstName, meAnyUserProfile.firstName) &&
        Objects.equals(this.id, meAnyUserProfile.id) &&
        Objects.equals(this.isAnonymous, meAnyUserProfile.isAnonymous) &&
        Objects.equals(this.lastName, meAnyUserProfile.lastName) &&
        Objects.equals(this.midName, meAnyUserProfile.midName) &&
        Objects.equals(this.middleName, meAnyUserProfile.middleName) &&
        Objects.equals(this.phone, meAnyUserProfile.phone) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, id, isAnonymous, lastName, midName, middleName, phone, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeAnyUserProfile {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAnonymous: ").append(toIndentedString(isAnonymous)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    midName: ").append(toIndentedString(midName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

